# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Sample CI CD

on:
  #push:
    #branches: [ "main" ]
    #branches:
    #- main
    #paths:
    #- terraform/**
  #pull_request:
    #branches: [ "main" ]
  #release:
    #types: [created]
  workflow_dispatch:
  #schedule:
  #- cron: "0 2 * * 1-5"

#env:
  #build-number: ${GITHUB_RUN_NUMBER}

#defaults:
  #run:
    #working-directory: ./workDir or ./terraform
    #shell: bash
  
jobs:
  build:
    #if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    #permissions:
      #contents: read
      #pull-requests: write
    runs-on: ubuntu-latest
    #runs-on: ${{ matrix.os }}
    #strategy:
      #matrix:
        #os: [ubuntu-latest, windows-latest, macOS-latest]
        #java_version: ['8', '11', '17']
    steps:
    - name: Code Checkout
      uses: actions/checkout@v4
      

        
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
      #uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6


    #- name: Set up Docker Buildx
      #uses: docker/setup-buildx-action@v3
      #with:
        #buildkitd-flags: --debug
        #config: .github/buildkitd.toml
    #- name: Build and Push
      #uses: docker/build-push-action@v5
      #with:
        #context: .
        #file: ./Dockerfile
        #push: true
        #tags: ${{ secrets.DOCKERHUB_USERNAME }}/test-repo:tdd-supermarket

    
    # AWS ECR
    #- name: Configure AWS credentials
      #uses: aws-actions/configure-aws-credentials@v1
      #with:
        #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #aws-region: eu-central-1
    
    #- name: Login to Amazon ECR
      #id: ecr-login
      #uses: aws-actions/amazon-ecr-login@v1
  
    #- name: Build, Tag, and Push Docker Image to AWS ECR
      #id: ecr-build
      #env:
        #REPO: test-repo
        #TAG: tdd-supermarket
        #REGISTRY: ${{ steps.ecr-login.outputs.registry }}
      #run: |
        #pwd
        #docker build --build-arg WORKDIR=${{ github.workspace }} -t $REGISTRY/$REPO:$TAG .
        #docker push $REGISTRY/$REPO:$TAG

    # Terraform Deploy Infrastructure
    - name: Setup Terraform
      env:
        # verbosity setting for Terraform logs
        TF_LOG: INFO
        # prevents Terraform from prompting for user input
        TF_INPUT: false
        # S3 bucket for the Terraform state
        BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
      uses: hashicorp/setup-terraform@v3
      #with:
        # Specific version of Terraform CLI
        #terraform_version: "1.1.7"
        # Credentials for Terraform Cloud (app.terraform.io)
        #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        # Credentials for Terraform Enterprise (TFE)
        #cli_config_credentials_hostname: 'terraform.example.com'
        # wrapper script installation can be skipped
        #terraform_wrapper: false
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    - name: Terraform Init
      id: init
      run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
    - name: Terraform Validate
      id: validate
      if: success() || failure()
      run: terraform validate -no-color
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    - name: Access earlier steps outputs and outcomes
      run: |
        echo ${{ steps.plan.outputs.stdout }}
        echo ${{ steps.plan.outputs.stderr }}
        echo ${{ steps.plan.outputs.exitcode }}
        echo ${{ steps.plan.outcome }}
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
