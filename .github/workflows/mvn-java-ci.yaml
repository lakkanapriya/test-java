
name: Java CI with Maven
on:
  workflow_dispatch:
jobs:
  build:
    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: '5'  # cache segment download timeout ; default 10 minutes
      IMAGE_TAG: tdd-supermarket
    strategy:
      matrix:
        os: [ubuntu-latest]    # [ubuntu-latest, windows-latest, macOS-latest]
        
        architecture: [x64]    # [x86, x64, armv7, aarch64, ppc64le]
        distribution: [corretto]  # https://github.com/actions/setup-java#supported-distributions
        java_version: [17]     # https://github.com/actions/setup-java#supported-version-syntax
        
        
    runs-on: ${{ matrix.os }}
    steps:
      - name: Code Checkout
        id: code-checkout
        uses: actions/checkout@v4
      
      #- run: |
          #download_url="https://example.com/java/jdk/6u45-b06/jdk-6u45-linux-x64.tar.gz"
          #wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
      - name: Set up JDK ${{ matrix.java_version }} on Arch ${{ matrix.architecture }}
        id: jdk-setup
        uses: actions/setup-java@v4
        with:
          architecture: ${{ matrix.architecture }}
          cache: maven  # gradle, maven, sbt
          #cache-dependency-path: | # optional
            #sub-project/pom.xml
          #check-latest: true
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java_version }}
          #java-version-file:
          #jdkFile: ${{ runner.temp }}/java_package.tar.gz
          #mvn-toolchain-vendor: 'Oracle'  # version: 1.6, vendor: Oracle, id: Oracle_1.6
          #mvn-toolchain-id: corretto_17 # default is ${distribution}_${java-version}

      - name: Run the Maven verify phase
        id: maven-verify
        run: mvn --batch-mode --update-snapshots verify

      - name: PMD Code Analysis
        id: pmd-analysis
        uses: pmd/pmd-github-action@v1   # https://github.com/pmd/pmd-github-action
        with:
          analyzeModifiedFilesOnly: false
          #createGitHubAnnotations: true  # all detected violations are added as annotations to the pull request
          #downloadUrl: ""  # default empty, determined by querying PMD releases ; PMD binary distribution download URL
          rulesets: '.pmd/rulesets/java/quickstart.xml'  # 'rulesets/java/quickstart.xml,ruleset.xml'
          sourcePath: 'src/main/java'
          #token: ${{ github.token }}
          #uploadSarifReport: true  # default true ; generated SARIF report will be uploaded as an artifact named "PMD Report"
          version: '7.0.0-rc4'  # default latest
      #- name: Fail build if there are PMD violations
        #if: steps.pmd-analysis.outputs.violations != 0
        #run: exit 1
      - name: Upload PMD SARIF file  #https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
        id: pmd-sarif-upload
        uses: github/codeql-action/upload-sarif@v3  # https://github.com/github/codeql-action
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          category: static-code-analysis-tool
          sarif_file: pmd-report.sarif

      #- name: Checkstyle Code Analysis

      - name: Compile Test Package with Maven
        #add maven-surefire-report-plugin, jacoco-maven-plugin and spring-boot-maven-plugin to pom.xml
        id: maven-compile-test-package
        run: |
          [ -e staging ] || mkdir -p staging/testOuts  # create seperate directory for output artifacts
          mvn -B clean test --file pom.xml
          #mvn -B site
          mvn -B surefire-report:report
          mvn -B jacoco:report
          [ -e target/site ] && mv target/site staging/
          [ -e target/surefire-reports ] && mv target/surefire-reports staging/testOuts/
          [ -e target/jacoco.exec ] && mv target/jacoco.exec staging/testOuts/
          mvn -B clean package spring-boot:repackage -Dmaven.test.skip=true --file pom.xml
          #ls -l target
          [ -e target/tdd-supermarket-1.0.0-SNAPSHOT.jar ] && cp target/tdd-supermarket-1.0.0-SNAPSHOT.jar staging/

      - name: Upload built jar and test reports
        id: upload-jar-testreports
        uses: actions/upload-artifact@v4  # https://github.com/actions/upload-artifact
        with:
          #compression-level: 6  # for Zlib, default 6, can range from 0 to 9
          #if-no-files-found:
          name: TestReports
          path: staging  # target/*.jar
          #path: |
            #target/tdd-supermarket-1.0.0-SNAPSHOT.jar
            #abc/*.jar
          retention-days: 1
          #overwrite: false  # default false ;
      - name: Output uploaded artifact ID
        run:  echo 'Artifact ID is ${{ steps.upload-jar-testreports.outputs.artifact-id }}'

      - name: Publish Docker Image to Docker Hub
        id: image-build-docker
        run: |
          docker build --build-arg WORKDIR=${{ github.workspace }} -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:$IMAGE_TAG .
      
      - name: Login to Docker Hub
        id: docker-login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish Docker Image to Docker Hub
        id: image-push-docker-hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:$IMAGE_TAG
