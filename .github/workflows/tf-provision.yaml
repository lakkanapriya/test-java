name: Terraform Provision
on:
  workflow_dispatch:
    inputs:
      resource:  # Working directory input from user
        description: Choose the resource
        type: choice
        options:
        - tf-aws
        - tf-gcp
      action:  # Terraform action you want to perform
        description: 'Terraform Action to Perform'
        type: choice
        options:
        - provision
        - destroy
env:
  TF_LOG: INFO  # verbosity setting for terraform logs
  TF_INPUT: false  # prevents terraform from prompting for user input
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}  # S3 bucket for the terraform state
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  
permissions:
  contents: read
  id-token: write
  pull-requests: write
      
jobs:
  provision:
    if: ${{ github.event.inputs.action == 'provision' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - name: Code Checkout
        id: code-checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}

      - name: Terraform Setup
        id: tf-setup
        uses: hashicorp/setup-terraform@v3
        #with:
          #terraform_version: "1.1.7"  # Specific version of Terraform CLI
          #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}    # Credentials for Terraform Cloud (app.terraform.io)
          #cli_config_credentials_hostname: 'terraform.example.com'    # Credentials for Terraform Enterprise (TFE)
          #terraform_wrapper: false    # wrapper script installation can be skipped
      
      - name: Terraform Format
        id: tf-fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: tf-init
        #run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
        
      - name: Terraform Validate
        id: tf-validate
        if: success() || failure()
        run: terraform validate -no-color

      - name: Copy Terraform State From Backend
        id: cp-tf-state-from-be
        run: aws s3 cp s3://your-bucket/yourapp-${{ env.ENVIRONMENT }}.tfstate yourapp-${{ env.ENVIRONMENT }}.tfstate
        
      - name: Terraform Plan
        id: tf-plan
        #if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }} # Plan creation is required both on pull_request, push
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.tf-plan.outcome == 'failure'
        run: exit 1
        
      - name: Access tf-plan outputs and outcomes
        run: |
          echo ${{ steps.tf-plan.outputs.stdout }}
          echo ${{ steps.tf-plan.outputs.stderr }}
          echo ${{ steps.tf-plan.outputs.exitcode }}
          echo ${{ steps.tf-plan.outcome }}

      - name: Terraform Apply
        id: tf-apply
        #if: github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Copy Terraform State To Backend
        id: cp-tf-state-to-be
        if: github.event_name == 'push' && steps.tf-apply.outcome == 'success'
        run: aws s3 cp terraform.tfstate s3://your-bucket/yourapp-${{ env.ENVIRONMENT }}.tfstate

  destroy:
    if: ${{ github.event.inputs.action == 'destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps: 
      - name: Code Checkout
        id: code-checkout
        uses: actions/checkout@v4

      - name: Terraform Setup
        id: tf-setup
        uses: hashicorp/setup-terraform@v3

      - name: Copy Terraform State From Backend
        id: cp-tf-state-from-be
        run: aws s3 cp s3://your-bucket/yourapp-${{ env.ENVIRONMENT }}.tfstate yourapp-${{ env.ENVIRONMENT }}.tfstate
        
      - name: Show Destroy plan
        id: tf-destroy-plan
        run: terraform plan -destroy
        continue-on-error: true
          
      - name: Terraform Destroy
        id: tf-destroy
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false  # -var-file=variables.tfvars

      - name: Delete plan file
        if: steps.destroy.outcome == 'success'
        run: aws s3 rm s3://your-bucket/yourapp-${{ github.event.inputs.env }}.tfstate
        
